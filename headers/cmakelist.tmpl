cmake_minimum_required (VERSION 2.6)

# for cross compile
SET(CMAKE_C_COMPILER   /usr/local/bin/gcc-7)
SET(CMAKE_CXX_COMPILER /usr/local/bin/g++-7)

# project
set(PROJECT_NAME MyProject)
project(${PROJECT_NAME})

# path
set (BASE_PATH ./)
set (SOME_LIB_PATH ../some_lib/.)

# for c++11
add_definitions(-std=c++11)

# Options. Turn on with 'cmake -Dmyvarname=ON'.
option(test "Build all tests." OFF) # Makes boolean 'test' available.
set(CMAKE_CXX_FLAGS "-g -Wall")

# normal 
# include
include_directories(
    ${BASE_PATH}
    ${BASE_PATH}../sample/inc_sample
    ${SOME_LIB_PATH}lib/rapidjson/include
    #${Boost_INCLUDE_DIRS}
)

# add executable
set (${PROJECT_NAME}_SRC
     ${SOME_LIB_PATH}src/sio_client.cpp
)
# generate project as a lib, so we can reuse it when testing
add_library(${PROJECT_NAME}_lib ${${PROJECT_NAME}_SRC})
add_executable (${PROJECT_NAME} main.cpp)
target_link_libraries(${PROJECT_NAME} ${PROJECT_NAME}_lib)

# test
if (test)
  # This adds another subdirectory, which has 'project(gtest)'.
  enable_testing()

  # Unit Tests(can be more)
  add_executable(runUnitTests test1_project.cpp) 
  target_link_libraries(runUnitTests gtest gtest_main) # Standard linking to gtest stuff.
  target_link_libraries(runUnitTests ${PROJECT_NAME}_lib) # link project

  add_executable(runUnitTests test2_project.cpp) 
  target_link_libraries(runUnitTests gtest gtest_main) # Standard linking to gtest stuff.
  target_link_libraries(runUnitTests ${PROJECT_NAME}_lib) # link project

  # This is so you can do 'make test' to see all your tests run, instead of
  # manually running the executable runUnitTests to see those specific tests.
  add_test(test_name1 runUnitTests1)
  add_test(test_name2 runUnitTests2)

endif()


# Dependency
# global pakcage
# for mstch
find_package (mstch)
include_directories(${MSTCH_INCLUDE_DIRS})
target_link_libraries (${PROJECT_NAME} mstch::mstch)

# customized lib
# for socketio
find_library(SOCKETIO_LIBRARY sioclient HINTS ${BASE_PATH}/third_party/socket.io-client-cpp)
include_directories(${BASE_PATH}third_party/socket.io-client-cpp/build/include)
target_link_libraries(${PROJECT_NAME} ${SOCKETIO_LIBRARY})

# boost
# set(Boost_USE_STATIC_LIBS OFF)
# set(Boost_USE_MULTITHREADED ON)
# set(Boost_USE_STATIC_RUNTIME OFF)
# find_package(Boost 1.48.0 COMPONENTS system thread)
# 
# # pthread
# find_package(Threads)
# 
# if(Boost_FOUND)
# 
#     # include
#     include_directories(
#         ${BASE_PATH}
#         ${BASE_PATH}../sample/inc_sample
#         ${SOME_LIB_PATH}lib/rapidjson/include
#         ${Boost_INCLUDE_DIRS}
#     )
# 
#     # add executable
#     set (${PROJECT_NAME}_SRC
#         ${SOME_LIB_PATH}src/sio_client.cpp
# 		${BASE_PATH}../src/main.cpp
#     )
#     add_executable (${PROJECT_NAME} ${${PROJECT_NAME}_SRC})
#     target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
# 
# endif()

